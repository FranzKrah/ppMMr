image
library(ppMMr)
roxygen2::roxygenise()
library(ppMMr)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::document()
library(ppMMr)
roxygen2::namespace_roclet()
roxygen2::roxygenize()
roxygen2::roxygenize(force = TRUE)
roxygen2::roxygenise(force = TRUE)
roxygen2::roxygenise(clean = TRUE)
library(ppMMr)
library(ppMMr)
library(ppMMr)
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
magick::image_read("../../../../Desktop/170919AA_001.jpg")
im <- magick::image_read("../../../../Desktop/170919AA_001.jpg")
im
plot(im)
im
print(im.crop)
im.crop
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
plot.cimg
imager::plot.cimg
library(imager)
plot.cimg
plot
define_polygon <- function(x, n){
## click the points you want
cat(" - Please click ", n, " times in the image (do not click more!) \n")
## plot image to console
par(mar = c(0,0,0,0))
imager::plot(x)
## click
coord <- locator(n = n, type ="l")
## prepare output
coord <- do.call(rbind, coord)
coord <- as.data.frame(t(coord))
return(coord)
}
magick::read_image()
im.magick < magick::image_read("../../../../Desktop/170919AA_001.jpg")
im.magick < magick::image_read("../../../../Desktop/170919AA_001.jpg")
im.magick <- magick::image_read("../../../../Desktop/170919AA_001.jpg")
im.image <- imager::load.image("../../../../Desktop/170919AA_001.jpg")
x <- im.magick
x
im.magick <- magick::image_read("../../../../Desktop/170911AB/1.jpg")
im.image <- imager::load.image("../../../../Desktop/170911AB/1.jpg")
x <- im.magick
x
imager::plot(x)
image_display(x)
library(magick)
image_display(x)
x <- im.image
imager::plot(x)
plot(x)
image(x)
implot(x)
implot(x, "a")
im.new <- implot(x, "a")
plot(im.new)
strsplit
trimws
locator
grep
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = FALSE)
library(ppMMr)
roxygen2::roxygenize(clean = FALSE)
roxygen2::roxygenize(clean = FALSE)
library(ppMMr)
library(ppMMr)
roxygen2::roxygenize(clean = FALSE)
library(ppMMr)
roxygen2::roxygenize(clean = FALSE)
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
cont <- readkey("Want to continue with next batch? (y/n)")
library(ppMMr)
library(ppMMr)
library(ppMMr)
mo_tab <- read_motion_table(path)
################################################
## This code is part of the Rpackage ppMMr    ##
## Franz-S. Krah; Leonie Schmid               ##
## 24 - 05 - 2018                             ##
################################################
#' Read motion detection table
#' @param path a character string specifying the path of the motion detection project with folders being MotionMeerkat folders
#' @return data.frame
#' @importFrom stringr str_extract
#' @export
read_motion_table <- function(path) {
mo_tab <- list.files(path)
mo_tab <- paste(path, mo_tab[grep("motion_table", mo_tab)], sep ="/")
x <-  as.Date(str_extract(mo_tab, "\\d*-\\d*-\\d*"))
coldate <- Sys.Date()
mo_tab_path <- mo_tab[which(abs(coldate-x) == min(abs(coldate - x)))]
mo_tab <- read.table(mo_tab_path, header = TRUE)
return(mo_tab)
}
mo_tab <- read_motion_table(path)
path
path <- "Documents/PhD/proj/high_priority/plot_watcher_mushroom"
mo_tab <- read_motion_table(path)
library(stringr)
mo_tab <- read_motion_table(path)
mo_tab <- list.files(path)
mo_tab <- paste(path, mo_tab[grep("motion_table", mo_tab)], sep ="/")
x <-  as.Date(str_extract(mo_tab, "\\d*-\\d*-\\d*"))
coldate <- Sys.Date()
mo_tab_path <- mo_tab[which(abs(coldate-x) == min(abs(coldate - x)))]
mo_tab <- read.table(mo_tab_path, header = TRUE)
mo_tab_path
mo_tab <- list.files(path)
mo_tab
path
list.files(path)
roxygen2::roxygenize(clean = FALSE)
roxygen2::roxygenize(clean = TRUE)
roxygen2::roxygenize(clean = TRUE)
library(ppMMr)
library(ppMMr)
path <- "../../../PhD/proj/high_priority/plot_watcher_mushroom/"
mo_tab <- read_motion_table(path)
################################################
## This code is part of the Rpackage ppMMr    ##
## Franz-S. Krah; Leonie Schmid               ##
## 24 - 05 - 2018                             ##
################################################
#' Read motion detection table
#' @param path a character string specifying the path of the motion detection project with folders being MotionMeerkat folders
#' @return data.frame
#' @importFrom stringr str_extract
#' @export
read_motion_table <- function(path) {
mo_tab <- list.files(path)
mo_tab <- paste(path, mo_tab[grep("motion_table", mo_tab)], sep ="/")
x <-  as.Date(str_extract(mo_tab, "\\d*-\\d*-\\d*"))
coldate <- Sys.Date()
mo_tab_path <- mo_tab[which(abs(coldate-x) == min(abs(coldate - x)))]
mo_tab <- read.table(mo_tab_path, header = TRUE)
return(mo_tab)
}
mo_tab <- read_motion_table(path)
function (x, ...)
library(stringr)
mo_tab <- read_motion_table(path)
inside <- which(mo_tab$inside==1)
x <- mo_tab[, grep("x1|x2|y1|y2", names(mo_tab))]
n <- length(inside)
length(inside) > batch
batch <- 100
length(inside) > batch
b <- c(seq(0, round_any(n, batch), batch), n)
library(plyr)
c(seq(0, round_any(n, batch), batch), n)
n
round_any(n, batch)
batch
n
round_any(n, batch, f = floor)
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b2
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
b
################################################
## This code is part of the Rpackage ppMMr    ##
## Franz-S. Krah; Leonie Schmid               ##
## 24 - 05 - 2018                             ##
################################################
#' Second step after MotionMeerkat
#' @param path a character string specifying the path of the motion detection project with folders being MotionMeerkat folders
#' @param batch number of frames after which to write to file
#' @param query.text a character string, e.g. "Animal? (no = 0/ yes = 1/ unclear = 2)"
#' @return does not return, but saves to project folder, see \link{read.motion.table}
#' @importFrom plyr round_any
#' @export
remove_non_animal  <- function(path, batch = 1000,
query.text = "Animal? (no = 0/ yes = 1/ unclear = 2); Consider top left red square!"){
mo_tab <- read_motion_table(path)
inside <- which(mo_tab$inside==1)
x <- mo_tab[, grep("x1|x2|y1|y2", names(mo_tab))]
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
}else{
batch <- data.frame(1, n = n)
}
mo_tab$animal <- NA
for(j in 1:nrow(batch)){
type1error <- list()
for(i in batch[j,1]:batch[j,2]){
cat(i, "  ")
enter <- is.animal(path =
paste0(mo_tab$path[inside[i]], mo_tab$path.sub[inside[i]]),
frame_nr = mo_tab$Frame[inside[i]],
coord = x[inside[i],], query.text = query.text)
mo_tab$animal[inside[i]] <- as.numeric(enter)
}
out <- list.files(path)
out <- paste(path, out[grep("motion_table", out)], sep ="/")
write.table(mo_tab, sep =";", row.names = FALSE, col.names = TRUE, append = FALSE, file = out)
cat(j, "batches done \n")
cont <- readkey("Want to continue with next batch? (y/n)")
ifelse(cont == "y", next, break)
}
}
remove_non_animal(path, batch = 100)
mo_tab <- read_motion_table(path)
inside <- which(mo_tab$inside==1)
x <- mo_tab[, grep("x1|x2|y1|y2", names(mo_tab))]
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
}else{
batch <- data.frame(1, n = n)
}
batch
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
batch
mo_tab$animal <- NA
################################################
## This code is part of the Rpackage ppMMr    ##
## Franz-S. Krah; Leonie Schmid               ##
## 24 - 05 - 2018                             ##
################################################
#' Second step after MotionMeerkat
#' @param path a character string specifying the path of the motion detection project with folders being MotionMeerkat folders
#' @param batch number of frames after which to write to file
#' @param query.text a character string, e.g. "Animal? (no = 0/ yes = 1/ unclear = 2)"
#' @return does not return, but saves to project folder, see \link{read.motion.table}
#' @importFrom plyr round_any
#' @export
remove_non_animal  <- function(path, batch = 1000,
query.text = "Animal? (no = 0/ yes = 1/ unclear = 2); Consider top left red square!"){
mo_tab <- read_motion_table(path)
inside <- which(mo_tab$inside==1)
x <- mo_tab[, grep("x1|x2|y1|y2", names(mo_tab))]
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
mo_tab$animal <- NA
for(j in 1:nrow(batch)){
type1error <- list()
for(i in batch[j,1]:batch[j,2]){
cat(i, "  ")
enter <- is.animal(path =
paste0(mo_tab$path[inside[i]], mo_tab$path.sub[inside[i]]),
frame_nr = mo_tab$Frame[inside[i]],
coord = x[inside[i],], query.text = query.text)
mo_tab$animal[inside[i]] <- as.numeric(enter)
}
out <- list.files(path)
out <- paste(path, out[grep("motion_table", out)], sep ="/")
write.table(mo_tab, sep =";", row.names = FALSE, col.names = TRUE, append = FALSE, file = out)
cat(j, "batches done \n")
cont <- readkey("Want to continue with next batch? (y/n)")
ifelse(cont == "y", next, break)
}
}
remove_non_animal(path, batch = 100)
library(ppMMr)
remove_non_animal(path, batch = 100)
library(ppMMr)
path <- "../../../PhD/proj/high_priority/plot_watcher_mushroom/"
mo_tab <- read_motion_table(path)
inside <- which(mo_tab$inside==1)
x <- mo_tab[, grep("x1|x2|y1|y2", names(mo_tab))]
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
batch <- 10
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
library(plyr)
n <- length(inside)
if(length(inside) > batch){
b <- c(seq(0, round_any(n, batch, f = floor), batch), n)
b2 <- c(seq(batch, round_any(n, batch, f = floor), batch), n)
b <- cbind(st = b[-length(b)], end = b2)
b[,1] <- b[,1] + 1
batch <- b
}else{
batch <- data.frame(1, n = n)
}
batch
mo_tab$animal <- NA
for(j in 1:nrow(batch)){
type1error <- list()
for(i in batch[j,1]:batch[j,2]){
cat(i, "  ")
enter <- is.animal(path =
paste0(mo_tab$path[inside[i]], mo_tab$path.sub[inside[i]]),
frame_nr = mo_tab$Frame[inside[i]],
coord = x[inside[i],], query.text = query.text)
mo_tab$animal[inside[i]] <- as.numeric(enter)
}
out <- list.files(path)
out <- paste(path, out[grep("motion_table", out)], sep ="/")
write.table(mo_tab, sep =";", row.names = FALSE, col.names = TRUE, append = FALSE, file = out)
cat(j, "batches done \n")
cont <- readkey("Want to continue with next batch? (y/n)")
ifelse(cont == "y", next, break)
}
paste0(mo_tab$path[inside[i]], mo_tab$path.sub[inside[i]])
library(ppMMr)
library(ppMMr)
library(ppMMr)
library(ppMMr)
library(ppMMr)
library(ppMMr)
inside
max(inside)
i < max(inside)
library(ppMMr)
roxygen2::roxygenise()
roxygen2::roxygenise(clean = TRUE)
devtools::document()
library(ppMMr)
library(ppMMr)
library(ppMMr)
library(ppMMr)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(ppMMr)
library(ppMMr)
